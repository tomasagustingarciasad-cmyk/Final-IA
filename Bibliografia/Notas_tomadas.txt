Kmins y Knn desarrollados por nosotros
En caso de usar librer√≠as tenemos que saber bien que hace
Normalizar la forma de las fotos
debe ser representativo para las im√°genes que nosotros queramos reconocer

Se debe comenzar tomando algunas fotos para probar para ver como procesarla. Prueba y error
Debo tener algunos elementos para entrenar la m√°quina (No recomendable usar esos mismos elementos de los validadores)


Debo usar un preprocesamiento bastante mas r√≠gido
Usar opencv para procesamiento de im√°genes


Para saber que caracter√≠sticas son √∫tiles hay que sacar la media y la desviaci√≥n est√°ndar para cada caracter√≠stica. Para ver cual es mas √∫til debo ver que la desviaci√≥n est√°ndar sea muy baja agarro las que tengan una deviaci√≥n est√°ndar inferior a ..... Sacamos la media para ver que esten muy separadas entre distintas categor√≠as
Si la caracter√≠stica no cumple, la eliminamos o mejoramos el preprocesamiento


Tecnica PCA agarra las caracter√≠sticas e intentan hacer una transformacion lineal para cambiar el espacio de estados de dimension 5 (suponiendo 5 caracter√≠sticas) a un espacio bi o tridimensional. Generando valores para que se mantengan invariable los valores de media y desviaci√≥n... buscar bien como funciona (se pierde informacion, pero intento perder lo menos posible). Esto me permite convertir estos vectores a un sistema en un plano

Sacamos imagen ---> preprocesamiento---> compara datos --->determina a que grupo pertenece
El KMINS se utiliza con el vector de 5 (mas informacion, mas exactitud, mas facil ver la distancia eucleriana(raiz del cuadrado de las diferencias)) o el de 2 (si el PCA es muy bueno)------> yo prefiero pre PCA. Lo uso solo como herramienta de dibujo

Hay t√©cnicas que permiten obtener mejor la diferencia de los elementos de KMINS. Para tener mayor validez, necesito que cada centroide tenga al menos un elemento. Habr√≠a que poner uno como definici√≥n. KMINS es un algoritmos de cuando conforme cada uno de los clusters no va a saber que es lo que es. Si elijo el centroide inicial ya sabiendo que √©ste es un tornillo

Averiguar t√©cnicas que permitan elegir a mano los centroides o elegir aleatoriamente dentro de la base de datos o que los centroides queden aleatoriamente espaciado. Con el KNN no existe este problema



Tal vez, opcional, presentacion con fast API


Libreria para la categorizacion de los audios librosa




üîπ FASE 1 ‚Äì Comprensi√≥n y planificaci√≥n

Leer y resumir la consigna (definir qu√© pide cada punto: agente, entorno, algoritmos, entregables).

Definir objetivos concretos del proyecto:
‚Üí Clasificar piezas mediante visi√≥n artificial (K-Means).
‚Üí Reconocer comandos de voz (K-NN).
‚Üí Estimar proporciones de la caja (Bayesiano).

Dise√±ar un diagrama general del sistema (bloques):
Captura ‚Üí Procesamiento ‚Üí Clasificaci√≥n ‚Üí Comando por voz ‚Üí Decisi√≥n.

Identificar los m√≥dulos principales:

M√≥dulo de visi√≥n (im√°genes).

M√≥dulo de voz (comandos).

M√≥dulo bayesiano (estimaci√≥n).

Interfaz principal o consola (control general).

üîπ FASE 2 ‚Äì Construcci√≥n de bases de datos

Base de datos de im√°genes:

Tomar al menos 6 im√°genes de cada tipo de pieza (tornillo, clavo, arandela, tuerca).

En distintas posiciones e iluminaciones.

Nombrarlas con etiquetas claras (tornillo_1.jpg, etc.).

Base de datos de voz:

Grabar las 3 palabras comando: proporci√≥n, contar, salir.

5 personas distintas, varias repeticiones (para KNN).

Guardar los audios en formato .wav o .mp3 con sus etiquetas.

üîπ FASE 3 ‚Äì Implementaci√≥n de algoritmos

M√≥dulo de visi√≥n (K-Means):

Cargar im√°genes y convertirlas a escala de grises.

Extraer caracter√≠sticas (√°rea, per√≠metro, momentos de Hu, circularidad, etc.).

Aplicar K-Means para agrupar las piezas en 4 clases.

Guardar etiquetas de clasificaci√≥n.

M√≥dulo de reconocimiento de voz (KNN):

Extraer caracter√≠sticas de los audios (MFCC o energ√≠a espectral).

Implementar KNN para reconocer las palabras.

Validar con un set de entrenamiento y test.

M√≥dulo bayesiano:

Tomar los resultados de la clasificaci√≥n de 10 piezas.

Aplicar un clasificador bayesiano para estimar la distribuci√≥n total de la caja (usando las probabilidades previas de cada tipo).

üîπ FASE 4 ‚Äì Integraci√≥n del agente

Integrar los m√≥dulos:

Al ejecutar el programa:

Selecciona una caja aleatoria.

Toma 10 im√°genes (muestra).

Aplica K-Means ‚Üí clasifica.

Espera comando por voz ‚Üí KNN.

Seg√∫n comando ‚Üí muestra resultados o sale.

Verificar flujo de ejecuci√≥n y errores.

üîπ FASE 5 ‚Äì Elaboraci√≥n del informe

Redactar el informe con esta estructura (seg√∫n consigna oficial):

T√≠tulo

Resumen (‚â§200 palabras)

Introducci√≥n (visi√≥n artificial + reconocimiento de voz + problema)

Especificaci√≥n del agente (tipo, tabla REAS, entorno)

Dise√±o del agente (explicaci√≥n de algoritmos)

C√≥digo (fragmentos relevantes)

Ejemplo de aplicaci√≥n (resultados con capturas)

Resultados y estad√≠sticas

Conclusiones

Bibliograf√≠a y prompts usados

Armar los anexos:

Diagramas de bloques.

Capturas del sistema en funcionamiento.

Gr√°ficos de clasificaci√≥n y resultados de KMeans/KNN.

üîπ FASE 6 ‚Äì Presentaci√≥n

Preparar defensa oral:

Explicar los 3 algoritmos (K-Means, KNN, Bayesiano).

Mostrar ejemplos reales.

Destacar c√≥mo interact√∫an los tres subsistemas.

Verificar entrega final:

Informe PDF.

C√≥digo fuente.

Bases de datos (im√°genes y audios).

https://www.youtube.com/watch?v=eGgESrWLV8s